version: "0.5"

# environment:
#   - 'IS_PRODUCTION_MODE=1'
# log_location: ./pc.log

processes:
  # check can run quickly with short feedback cycles.
  cargo_check:
    command: cargo watch --quiet --clear --shell 'cargo check --color always 2>&1 && cargo check --features with_predictions --color always 2>&1 && touch .cargo-checked'

  # once a check was successful, trigger a build that can be started.
  # since the build triggers the run immediately, it can also send a reload signal to browser-sync
  cargo_build:
    command: |
      touch .cargo-checked
      cargo watch --quiet --postpone --no-vcs-ignores --watch .cargo-checked --shell 'cargo rustc --color always 2>&1 -- -Awarnings && touch .cargo-built; sleep 0.5; browser-sync reload --port 3000'

  # run app immediately.
  # once a build is successful, restart the service
  cargo_run:
    # readiness_probe:
    #   http_get:
    #     host: 127.0.0.1
    #     scheme: http
    #     path: "/"
    #     port: 8000
    #   initial_delay_seconds: 1
    #   period_seconds: 1
    environment:
      - RUST_LOG=info,sqlx::query=warn,propolis=debug
      # - RUST_LOG=sqlx::query=info,tower_http=trace
    command: |
      touch .cargo-built
      cargo watch --quiet --postpone --no-vcs-ignores --watch .cargo-built --shell 'target/debug/propolis'

  # once the web-server is running, proxy it through browser-sync
  browser_sync:
    # depends_on:
    #   cargo_run:
    #     condition: process_healthy
    command: |
      # we don't use depends_on here, because the health-check periodically sends http requests forever
      until $(curl --output /dev/null --silent --head --fail http://localhost:8000); do
          sleep 1
      done
      browser-sync start --proxy "127.0.0.1:8000" --port 3000 --no-open

