name: Build

on:
  push:
    branches: ["main"]
  pull_request:
    types: [opened, synchronize]
  merge_group:
  workflow_dispatch:

permissions:
  contents: read

# automatically cancel previous runs on the same PR
# https://stackoverflow.com/questions/66335225/how-to-cancel-previous-runs-in-the-pr-when-you-push-new-commitsupdate-the-curre/67939898#67939898
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  BUILDKIT_PROGRESS: plain # suppress docker progress bars
  DOCKER_BUILDKIT: "1" # default docker builder from version 23.0

jobs:
  build:
    name: "Build and Test"
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    env:
      RUSTFLAGS: --deny warnings # fatal warnings
      CARGO_TERM_COLOR: always
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # https://github.com/actions/checkout/issues/626
          # This is correct, because we're using a merge queue which only merges when built against the latest target branch.
          # https://docs.mergify.com/actions/queue/
          ref: ${{ github.event.pull_request.head.sha }}
          submodules: recursive

      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Rust build cache
        uses: Swatinem/rust-cache@v2

      - name: Install tools
        run: cargo install sqlx-cli --version 0.7.0 --no-default-features --features sqlite

      - name: load envrc
        uses: HatsuneMiku3939/direnv-action@9aff8709e886e58b1fb29b17334e094ea5ace74f # pin@v1

      - name: Migrate database
        run: |
          sqlx database create
          sqlx migrate run

      - name: Validate current schema
        run: |
          scripts/sorted_schema > /tmp/current_schema.sql
          git diff --no-index --ws-error-highlight=all --color=always /tmp/current_schema.sql schema.sql
          cmp -s /tmp/current_schema.sql schema.sql

      - name: Validate sqlx offline mode data
        run: cargo sqlx prepare --check --workspace -- --all-targets --all-features

      - name: cargo clippy (no features)
        # clippy also includes all warnings from cargo check
        run: cargo --locked clippy --workspace --all-targets --no-default-features

      - name: cargo clippy (all features)
        # clippy also includes all warnings from cargo check
        run: cargo --locked clippy --workspace --all-targets --all-features

      - name: cargo test
        run: cargo --locked test --workspace --all-targets --all-features

      - name: cargo fmt --check
        run: cargo --locked fmt --check

      - name: cargo build
        run: cargo --locked build

      - name: make sqlite-vector
        run: make -C sqlite-vector

      - name: Start webserver in background
        run: |
          set -e
          export OPENAI_API_KEY=foooooooooooo # fake, but enough to pass tests!
          target/debug/propolis > /tmp/background_output 2>&1 &
          sleep 3
          kill -0 $! || (cat /tmp/background_output && exit 1) # check if background process is still running

      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Install yarn dependencies
        run: yarn
      - name: Install Playwright Browsers
        run: yarn playwright install --with-deps chromium
      - name: Run Playwright tests
        run: yarn playwright test
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  build-docker:
    name: "Build Docker"
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # https://github.com/actions/checkout/issues/626
          # This is correct, because we're using a merge queue which only merges when built against the latest target branch.
          # https://docs.mergify.com/actions/queue/
          ref: ${{ github.event.pull_request.head.sha }}
          submodules: recursive

      - name: Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2 

      - name: Docker Cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile') }}

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          load: true
          tags: propolis:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

  deploy:
      needs: [build, build-docker]
      if: ${{ github.ref_type == 'branch' && github.ref_name == 'main' }}
      name: Deploy app
      runs-on: ubuntu-22.04
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      timeout-minutes: 30
      steps:
        - uses: actions/checkout@v3

        # - name: Docker Buildx
        #   id: buildx
        #   uses: docker/setup-buildx-action@v2 

        # - name: Docker Cache
        #   uses: actions/cache@v3
        #   with:
        #     path: /tmp/.buildx-cache
        #     key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile') }}

        # - name: Build Docker image
        #   uses: docker/build-push-action@v4
        #   with:
        #     context: ./
        #     file: ./Dockerfile
        #     builder: ${{ steps.buildx.outputs.name }}
        #     load: true
        #     tags: propolis:latest
        #     cache-from: type=local,src=/tmp/.buildx-cache
        #     cache-to: type=local,dest=/tmp/.buildx-cache

        - uses: superfly/flyctl-actions/setup-flyctl@master
        - run: flyctl deploy --local-only
